this.workbox=this.workbox||{},this.workbox.core=function(e){"use strict";try{self["workbox:core:5.1.4"]&&_()}catch(e){}const t=(()=>{"__WB_DISABLE_DEV_LOGS"in self||(self.__WB_DISABLE_DEV_LOGS=!1);let e=!1;const t={debug:"#7f8c8d",log:"#2ecc71",warn:"#f39c12",error:"#c0392b",groupCollapsed:"#3498db",groupEnd:null},r=function(r,n){if(self.__WB_DISABLE_DEV_LOGS)return;if("groupCollapsed"===r&&/^((?!chrome|android).)*safari/i.test(navigator.userAgent))return void console[r](...n);const a=e?[]:["%cworkbox",[`background: ${t[r]}`,"border-radius: 0.5em","color: white","font-weight: bold","padding: 2px 0.5em"].join(";")];console[r](...a,...n),"groupCollapsed"===r&&(e=!0),"groupEnd"===r&&(e=!1)},n={},a=Object.keys(t);for(const e of a){const t=e;n[t]=(...e)=>{r(t,e)}}return n})(),r={"invalid-value":({paramName:e,validValueDescription:t,value:r})=>{if(!e||!t)throw new Error("Unexpected input to 'invalid-value' error.");return`The '${e}' parameter was given a value with an unexpected value. ${t} Received a value of ${JSON.stringify(r)}.`},"not-an-array":({moduleName:e,className:t,funcName:r,paramName:n})=>{if(!(e&&t&&r&&n))throw new Error("Unexpected input to 'not-an-array' error.");return`The parameter '${n}' passed into '${e}.${t}.${r}()' must be an array.`},"incorrect-type":({expectedType:e,paramName:t,moduleName:r,className:n,funcName:a})=>{if(!(e&&t&&r&&a))throw new Error("Unexpected input to 'incorrect-type' error.");return`The parameter '${t}' passed into '${r}.${n?n+".":""}${a}()' must be of type ${e}.`},"incorrect-class":({expectedClass:e,paramName:t,moduleName:r,className:n,funcName:a,isReturnValueProblem:o})=>{if(!e||!r||!a)throw new Error("Unexpected input to 'incorrect-class' error.");return o?`The return value from '${r}.${n?n+".":""}${a}()' must be an instance of class ${e.name}.`:`The parameter '${t}' passed into '${r}.${n?n+".":""}${a}()' must be an instance of class ${e.name}.`},"missing-a-method":({expectedMethod:e,paramName:t,moduleName:r,className:n,funcName:a})=>{if(!(e&&t&&r&&n&&a))throw new Error("Unexpected input to 'missing-a-method' error.");return`${r}.${n}.${a}() expected the '${t}' parameter to expose a '${e}' method.`},"add-to-cache-list-unexpected-type":({entry:e})=>`An unexpected entry was passed to 'workbox-precaching.PrecacheController.addToCacheList()' The entry '${JSON.stringify(e)}' isn't supported. You must supply an array of strings with one or more characters, objects with a url property or Request objects.`,"add-to-cache-list-conflicting-entries":({firstEntry:e,secondEntry:t})=>{if(!e||!t)throw new Error("Unexpected input to 'add-to-cache-list-duplicate-entries' error.");return`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e._entryId} but different revision details. Workbox is unable to cache and version the asset correctly. Please remove one of the entries.`},"plugin-error-request-will-fetch":({thrownError:e})=>{if(!e)throw new Error("Unexpected input to 'plugin-error-request-will-fetch', error.");return`An error was thrown by a plugins 'requestWillFetch()' method. The thrown error message was: '${e.message}'.`},"invalid-cache-name":({cacheNameId:e,value:t})=>{if(!e)throw new Error("Expected a 'cacheNameId' for error 'invalid-cache-name'");return`You must provide a name containing at least one character for setCacheDetails({${e}: '...'}). Received a value of '${JSON.stringify(t)}'`},"unregister-route-but-not-found-with-method":({method:e})=>{if(!e)throw new Error("Unexpected input to 'unregister-route-but-not-found-with-method' error.");return`The route you're trying to unregister was not  previously registered for the method type '${e}'.`},"unregister-route-route-not-registered":()=>"The route you're trying to unregister was not previously registered.","queue-replay-failed":({name:e})=>`Replaying the background sync queue '${e}' failed.`,"duplicate-queue-name":({name:e})=>`The Queue name '${e}' is already being used. All instances of backgroundSync.Queue must be given unique names.`,"expired-test-without-max-age":({methodName:e,paramName:t})=>`The '${e}()' method can only be used when the '${t}' is used in the constructor.`,"unsupported-route-type":({moduleName:e,className:t,funcName:r,paramName:n})=>`The supplied '${n}' parameter was an unsupported type. Please check the docs for ${e}.${t}.${r} for valid input types.`,"not-array-of-class":({value:e,expectedClass:t,moduleName:r,className:n,funcName:a,paramName:o})=>`The supplied '${o}' parameter must be an array of '${t}' objects. Received '${JSON.stringify(e)},'. Please check the call to ${r}.${n}.${a}() to fix the issue.`,"max-entries-or-age-required":({moduleName:e,className:t,funcName:r})=>`You must define either config.maxEntries or config.maxAgeSecondsin ${e}.${t}.${r}`,"statuses-or-headers-required":({moduleName:e,className:t,funcName:r})=>`You must define either config.statuses or config.headersin ${e}.${t}.${r}`,"invalid-string":({moduleName:e,funcName:t,paramName:r})=>{if(!r||!e||!t)throw new Error("Unexpected input to 'invalid-string' error.");return`When using strings, the '${r}' parameter must start with 'http' (for cross-origin matches) or '/' (for same-origin matches). Please see the docs for ${e}.${t}() for more info.`},"channel-name-required":()=>"You must provide a channelName to construct a BroadcastCacheUpdate instance.","invalid-responses-are-same-args":()=>"The arguments passed into responsesAreSame() appear to be invalid. Please ensure valid Responses are used.","expire-custom-caches-only":()=>"You must provide a 'cacheName' property when using the expiration plugin with a runtime caching strategy.","unit-must-be-bytes":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'unit-must-be-bytes' error.");return`The 'unit' portion of the Range header must be set to 'bytes'. The Range header provided was "${e}"`},"single-range-only":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'single-range-only' error.");return`Multiple ranges are not supported. Please use a  single start value, and optional end value. The Range header provided was "${e}"`},"invalid-range-values":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'invalid-range-values' error.");return`The Range header is missing both start and end values. At least one of those values is needed. The Range header provided was "${e}"`},"no-range-header":()=>"No Range header was found in the Request provided.","range-not-satisfiable":({size:e,start:t,end:r})=>`The start (${t}) and end (${r}) values in the Range are not satisfiable by the cached response, which is ${e} bytes.`,"attempt-to-cache-non-get-request":({url:e,method:t})=>`Unable to cache '${e}' because it is a '${t}' request and only 'GET' requests can be cached.`,"cache-put-with-no-response":({url:e})=>`There was an attempt to cache '${e}' but the response was not defined.`,"no-response":({url:e,error:t})=>{let r=`The strategy could not generate a response for '${e}'.`;return t&&(r+=` The underlying error is ${t}.`),r},"bad-precaching-response":({url:e,status:t})=>`The precaching request for '${e}' failed with an HTTP status of ${t}.`,"non-precached-url":({url:e})=>`createHandlerBoundToURL('${e}') was called, but that URL is not precached. Please pass in a URL that is precached instead.`,"add-to-cache-list-conflicting-integrities":({url:e})=>`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e} with different integrity values. Please remove one of them.`,"missing-precache-entry":({cacheName:e,url:t})=>`Unable to find a precached response in ${e} for ${t}.`},n=(e,t={})=>{const n=r[e];if(!n)throw new Error(`Unable to find message for code '${e}'.`);return n(t)};class a extends Error{constructor(e,t){super(n(e,t)),this.name=e,this.details=t}}const o={hasMethod:(e,t,r)=>{if("function"!==typeof e[t])throw r.expectedMethod=t,new a("missing-a-method",r)},isArray:(e,t)=>{if(!Array.isArray(e))throw new a("not-an-array",t)},isInstance:(e,t,r)=>{if(!(e instanceof t))throw r.expectedClass=t,new a("incorrect-class",r)},isOneOf:(e,t,r)=>{if(!t.includes(e))throw r.validValueDescription=`Valid values are ${JSON.stringify(t)}.`,new a("invalid-value",r)},isType:(e,t,r)=>{if(typeof e!==t)throw r.expectedType=t,new a("incorrect-type",r)},isArrayOfClass:(e,t,r)=>{const n=new a("not-array-of-class",r);if(!Array.isArray(e))throw n;for(const r of e)if(!(r instanceof t))throw n}},s=new Set;const i={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:"undefined"!=typeof registration?registration.scope:""},c=e=>[i.prefix,e,i.suffix].filter((e=>e&&e.length>0)).join("-"),u={updateDetails:e=>{(e=>{for(const t of Object.keys(i))e(t)})((t=>{"string"==typeof e[t]&&(i[t]=e[t])}))},getGoogleAnalyticsName:e=>e||c(i.googleAnalytics),getPrecacheName:e=>e||c(i.precache),getPrefix:()=>i.prefix,getRuntimeName:e=>e||c(i.runtime),getSuffix:()=>i.suffix};async function l(){t.log(`About to run ${s.size} callbacks to clean up caches.`);for(const e of s)await e(),t.log(e,"is complete.");t.log("Finished running callbacks.")}const d=e=>new URL(String(e),location.href).href.replace(new RegExp(`^${location.origin}`),""),h=(e,t)=>e.filter((e=>t in e)),p=async({request:e,mode:t,plugins:r=[]})=>{const n=h(r,"cacheKeyWillBeUsed");let a=e;for(const e of n)a=await e.cacheKeyWillBeUsed.call(e,{mode:t,request:a}),"string"==typeof a&&(a=new Request(a)),o.isInstance(a,Request,{moduleName:"Plugin",funcName:"cacheKeyWillBeUsed",isReturnValueProblem:!0});return a},m=async({cacheName:e,request:r,event:n,matchOptions:a,plugins:s=[]})=>{const i=await self.caches.open(e),c=await p({plugins:s,request:r,mode:"read"});let u=await i.match(c,a);u?t.debug(`Found a cached response in '${e}'.`):t.debug(`No cached response found in '${e}'.`);for(const t of s)if("cachedResponseWillBeUsed"in t){const r=t.cachedResponseWillBeUsed;u=await r.call(t,{cacheName:e,event:n,matchOptions:a,cachedResponse:u,request:c}),u&&o.isInstance(u,Response,{moduleName:"Plugin",funcName:"cachedResponseWillBeUsed",isReturnValueProblem:!0})}return u},f={put:async({cacheName:e,request:r,response:n,event:s,plugins:i=[],matchOptions:c})=>{if(r.method&&"GET"!==r.method)throw new a("attempt-to-cache-non-get-request",{url:d(r.url),method:r.method});const u=await p({plugins:i,request:r,mode:"write"});if(!n)throw t.error(`Cannot cache non-existent response for '${d(u.url)}'.`),new a("cache-put-with-no-response",{url:d(u.url)});const f=await(async({request:e,response:r,event:n,plugins:a=[]})=>{let s=r,i=!1;for(const t of a)if("cacheWillUpdate"in t){i=!0;const r=t.cacheWillUpdate;if(s=await r.call(t,{request:e,response:s,event:n}),s&&o.isInstance(s,Response,{moduleName:"Plugin",funcName:"cacheWillUpdate",isReturnValueProblem:!0}),!s)break}return i||(s&&200!==s.status&&(0===s.status?t.warn(`The response for '${e.url}' is an opaque response. The caching strategy that you're using will not cache opaque responses by default.`):t.debug(`The response for '${e.url}' returned a status code of '${r.status}' and won't be cached as a result.`)),s=s&&200===s.status?s:void 0),s||null})({event:s,plugins:i,response:n,request:u});if(!f)return void t.debug(`Response '${d(u.url)}' will not be cached.`,f);const g=await self.caches.open(e),w=h(i,"cacheDidUpdate"),y=w.length>0?await m({cacheName:e,matchOptions:c,request:u}):null;t.debug(`Updating the '${e}' cache with a new Response for ${d(u.url)}.`);try{await g.put(u,f)}catch(e){throw"QuotaExceededError"===e.name&&await l(),e}for(const t of w)await t.cacheDidUpdate.call(t,{cacheName:e,event:s,oldResponse:y,newResponse:f,request:u})},match:m};let g,w;function y(){if(void 0===w){const e=new Response("");if("body"in e)try{new Response(e.body),w=!0}catch(e){w=!1}w=!1}return w}class b{constructor(e,t,{onupgradeneeded:r,onversionchange:n}={}){this._db=null,this._name=e,this._version=t,this._onupgradeneeded=r,this._onversionchange=n||(()=>this.close())}get db(){return this._db}async open(){if(!this._db)return this._db=await new Promise(((e,t)=>{let r=!1;setTimeout((()=>{r=!0,t(new Error("The open request was blocked and timed out"))}),this.OPEN_TIMEOUT);const n=indexedDB.open(this._name,this._version);n.onerror=()=>t(n.error),n.onupgradeneeded=e=>{r?(n.transaction.abort(),n.result.close()):"function"==typeof this._onupgradeneeded&&this._onupgradeneeded(e)},n.onsuccess=()=>{const t=n.result;r?t.close():(t.onversionchange=this._onversionchange.bind(this),e(t))}})),this}async getKey(e,t){return(await this.getAllKeys(e,t,1))[0]}async getAll(e,t,r){return await this.getAllMatching(e,{query:t,count:r})}async getAllKeys(e,t,r){return(await this.getAllMatching(e,{query:t,count:r,includeKeys:!0})).map((e=>e.key))}async getAllMatching(e,{index:t,query:r=null,direction:n="next",count:a,includeKeys:o=!1}={}){return await this.transaction([e],"readonly",((s,i)=>{const c=s.objectStore(e),u=t?c.index(t):c,l=[],d=u.openCursor(r,n);d.onsuccess=()=>{const e=d.result;e?(l.push(o?e:e.value),a&&l.length>=a?i(l):e.continue()):i(l)}}))}async transaction(e,t,r){return await this.open(),await new Promise(((n,a)=>{const o=this._db.transaction(e,t);o.onabort=()=>a(o.error),o.oncomplete=()=>n(),r(o,(e=>n(e)))}))}async _call(e,t,r,...n){return await this.transaction([t],r,((r,a)=>{const o=r.objectStore(t),s=o[e].apply(o,n);s.onsuccess=()=>a(s.result)}))}close(){this._db&&(this._db.close(),this._db=null)}}b.prototype.OPEN_TIMEOUT=2e3;const v={readonly:["get","count","getKey","getAll","getAllKeys"],readwrite:["add","put","clear","delete"]};for(const[e,t]of Object.entries(v))for(const r of t)r in IDBObjectStore.prototype&&(b.prototype[r]=async function(t,...n){return await this._call(r,t,e,...n)});const $={fetch:async({request:e,fetchOptions:r,event:n,plugins:s=[]})=>{if("string"==typeof e&&(e=new Request(e)),n instanceof FetchEvent&&n.preloadResponse){const r=await n.preloadResponse;if(r)return t.log(`Using a preloaded navigation response for '${d(e.url)}'`),r}o.isInstance(e,Request,{paramName:"request",expectedClass:Request,moduleName:"workbox-core",className:"fetchWrapper",funcName:"wrappedFetch"});const i=h(s,"fetchDidFail"),c=i.length>0?e.clone():null;try{for(const t of s)if("requestWillFetch"in t){const r=t.requestWillFetch,a=e.clone();(e=await r.call(t,{request:a,event:n}))&&o.isInstance(e,Request,{moduleName:"Plugin",funcName:"cachedResponseWillBeUsed",isReturnValueProblem:!0})}}catch(e){throw new a("plugin-error-request-will-fetch",{thrownError:e})}const u=e.clone();try{let a;a="navigate"===e.mode?await fetch(e):await fetch(e,r),t.debug(`Network request for '${d(e.url)}' returned a response with status '${a.status}'.`);for(const e of s)"fetchDidSucceed"in e&&(a=await e.fetchDidSucceed.call(e,{event:n,request:u,response:a}),a&&o.isInstance(a,Response,{moduleName:"Plugin",funcName:"fetchDidSucceed",isReturnValueProblem:!0}));return a}catch(r){t.error(`Network request for '${d(e.url)}' threw an error.`,r);for(const e of i)await e.fetchDidFail.call(e,{error:r,event:n,originalRequest:c.clone(),request:u.clone()});throw r}}};function N(e){return new Promise((t=>setTimeout(t,e)))}var x=Object.freeze({__proto__:null,assert:o,cacheNames:u,cacheWrapper:f,canConstructReadableStream:function(){if(void 0===g)try{new ReadableStream({start(){}}),g=!0}catch(e){g=!1}return g},canConstructResponseFromBodyStream:y,dontWaitFor:function(e){e.then((()=>{}))},DBWrapper:b,Deferred:class{constructor(){this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}},deleteDatabase:async e=>{await new Promise(((t,r)=>{const n=indexedDB.deleteDatabase(e);n.onerror=()=>{r(n.error)},n.onblocked=()=>{r(new Error("Delete blocked"))},n.onsuccess=()=>{t()}}))},executeQuotaErrorCallbacks:l,fetchWrapper:$,getFriendlyURL:d,logger:t,resultingClientExists:async function(e){if(!e)return;let t=await self.clients.matchAll({type:"window"});const r=new Set(t.map((e=>e.id)));let n;const a=performance.now();for(;performance.now()-a<2e3&&(t=await self.clients.matchAll({type:"window"}),n=t.find((t=>e?t.id===e:!r.has(t.id))),!n);)await N(100);return n},timeout:N,WorkboxError:a});const R={get googleAnalytics(){return u.getGoogleAnalyticsName()},get precache(){return u.getPrecacheName()},get prefix(){return u.getPrefix()},get runtime(){return u.getRuntimeName()},get suffix(){return u.getSuffix()}};return e._private=x,e.cacheNames=R,e.clientsClaim=function(){self.addEventListener("activate",(()=>self.clients.claim()))},e.copyResponse=async function(e,t){const r=e.clone(),n={headers:new Headers(r.headers),status:r.status,statusText:r.statusText},a=t?t(n):n,o=y()?r.body:await r.blob();return new Response(o,a)},e.registerQuotaErrorCallback=function(e){o.isType(e,"function",{moduleName:"workbox-core",funcName:"register",paramName:"callback"}),s.add(e),t.log("Registered a callback to respond to quota errors.",e)},e.setCacheNameDetails=function(e){if(Object.keys(e).forEach((t=>{o.isType(e[t],"string",{moduleName:"workbox-core",funcName:"setCacheNameDetails",paramName:`details.${t}`})})),"precache"in e&&0===e.precache.length)throw new a("invalid-cache-name",{cacheNameId:"precache",value:e.precache});if("runtime"in e&&0===e.runtime.length)throw new a("invalid-cache-name",{cacheNameId:"runtime",value:e.runtime});if("googleAnalytics"in e&&0===e.googleAnalytics.length)throw new a("invalid-cache-name",{cacheNameId:"googleAnalytics",value:e.googleAnalytics});u.updateDetails(e)},e.skipWaiting=function(){self.addEventListener("install",(()=>self.skipWaiting()))},e}({});