this.workbox=this.workbox||{},this.workbox.rangeRequests=function(e,r,a,s){"use strict";try{self["workbox:range-requests:5.1.4"]&&_()}catch(e){}async function t(e,t){try{if(a.assert.isInstance(e,Request,{moduleName:"workbox-range-requests",funcName:"createPartialResponse",paramName:"request"}),a.assert.isInstance(t,Response,{moduleName:"workbox-range-requests",funcName:"createPartialResponse",paramName:"originalResponse"}),206===t.status)return t;const s=e.headers.get("range");if(!s)throw new r.WorkboxError("no-range-header");const o=function(e){a.assert.isType(e,"string",{moduleName:"workbox-range-requests",funcName:"parseRangeHeader",paramName:"rangeHeader"});const s=e.trim().toLowerCase();if(!s.startsWith("bytes="))throw new r.WorkboxError("unit-must-be-bytes",{normalizedRangeHeader:s});if(s.includes(","))throw new r.WorkboxError("single-range-only",{normalizedRangeHeader:s});const t=/(\d*)-(\d*)/.exec(s);if(!t||!t[1]&&!t[2])throw new r.WorkboxError("invalid-range-values",{normalizedRangeHeader:s});return{start:""===t[1]?void 0:Number(t[1]),end:""===t[2]?void 0:Number(t[2])}}(s),n=await t.blob(),i=function(e,s,t){a.assert.isInstance(e,Blob,{moduleName:"workbox-range-requests",funcName:"calculateEffectiveBoundaries",paramName:"blob"});const o=e.size;if(t&&t>o||s&&s<0)throw new r.WorkboxError("range-not-satisfiable",{size:o,end:t,start:s});let n,i;return void 0!==s&&void 0!==t?(n=s,i=t+1):void 0!==s&&void 0===t?(n=s,i=o):void 0!==t&&void 0===s&&(n=o-t,i=o),{start:n,end:i}}(n,o.start,o.end),u=n.slice(i.start,i.end),g=u.size,l=new Response(u,{status:206,statusText:"Partial Content",headers:t.headers});return l.headers.set("Content-Length",String(g)),l.headers.set("Content-Range",`bytes ${i.start}-${i.end-1}/`+n.size),l}catch(r){return s.logger.warn("Unable to construct a partial response; returning a 416 Range Not Satisfiable response instead."),s.logger.groupCollapsed("View details here."),s.logger.log(r),s.logger.log(e),s.logger.log(t),s.logger.groupEnd(),new Response("",{status:416,statusText:"Range Not Satisfiable"})}}return e.RangeRequestsPlugin=class{constructor(){this.cachedResponseWillBeUsed=async({request:e,cachedResponse:r})=>r&&e.headers.has("range")?await t(e,r):r}},e.createPartialResponse=t,e}({},workbox.core._private,workbox.core._private,workbox.core._private);